//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebUI.WcfEventServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class EventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeFinishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LayoutIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeFinish {
            get {
                return this.DateTimeFinishField;
            }
            set {
                if ((this.DateTimeFinishField.Equals(value) != true)) {
                    this.DateTimeFinishField = value;
                    this.RaisePropertyChanged("DateTimeFinish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTimeStart {
            get {
                return this.DateTimeStartField;
            }
            set {
                if ((this.DateTimeStartField.Equals(value) != true)) {
                    this.DateTimeStartField = value;
                    this.RaisePropertyChanged("DateTimeStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LayoutId {
            get {
                return this.LayoutIdField;
            }
            set {
                if ((this.LayoutIdField.Equals(value) != true)) {
                    this.LayoutIdField = value;
                    this.RaisePropertyChanged("LayoutId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidEventException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
    [System.SerializableAttribute()]
    public partial class InvalidEventException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CanNotCreateEventSeatException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
    [System.SerializableAttribute()]
    public partial class CanNotCreateEventSeatException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CanNotDeleteEventException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
    [System.SerializableAttribute()]
    public partial class CanNotDeleteEventException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventSeatDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class EventSeatDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventAreaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventAreaId {
            get {
                return this.EventAreaIdField;
            }
            set {
                if ((this.EventAreaIdField.Equals(value) != true)) {
                    this.EventAreaIdField = value;
                    this.RaisePropertyChanged("EventAreaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Row {
            get {
                return this.RowField;
            }
            set {
                if ((this.RowField.Equals(value) != true)) {
                    this.RowField = value;
                    this.RaisePropertyChanged("Row");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventAreaDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class EventAreaDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LayoutIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordX {
            get {
                return this.CoordXField;
            }
            set {
                if ((this.CoordXField.Equals(value) != true)) {
                    this.CoordXField = value;
                    this.RaisePropertyChanged("CoordX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordY {
            get {
                return this.CoordYField;
            }
            set {
                if ((this.CoordYField.Equals(value) != true)) {
                    this.CoordYField = value;
                    this.RaisePropertyChanged("CoordY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LayoutId {
            get {
                return this.LayoutIdField;
            }
            set {
                if ((this.LayoutIdField.Equals(value) != true)) {
                    this.LayoutIdField = value;
                    this.RaisePropertyChanged("LayoutId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CanNotDeleteEventSeatException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
    [System.SerializableAttribute()]
    public partial class CanNotDeleteEventSeatException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventInfoDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.DTO")]
    [System.SerializableAttribute()]
    public partial class EventInfoDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayoutDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LayoutNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VenueAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VenueDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VenueNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VenuePhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayoutDescription {
            get {
                return this.LayoutDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.LayoutDescriptionField, value) != true)) {
                    this.LayoutDescriptionField = value;
                    this.RaisePropertyChanged("LayoutDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LayoutName {
            get {
                return this.LayoutNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LayoutNameField, value) != true)) {
                    this.LayoutNameField = value;
                    this.RaisePropertyChanged("LayoutName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VenueAddress {
            get {
                return this.VenueAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.VenueAddressField, value) != true)) {
                    this.VenueAddressField = value;
                    this.RaisePropertyChanged("VenueAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VenueDescription {
            get {
                return this.VenueDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.VenueDescriptionField, value) != true)) {
                    this.VenueDescriptionField = value;
                    this.RaisePropertyChanged("VenueDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VenueName {
            get {
                return this.VenueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VenueNameField, value) != true)) {
                    this.VenueNameField = value;
                    this.RaisePropertyChanged("VenueName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VenuePhone {
            get {
                return this.VenuePhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.VenuePhoneField, value) != true)) {
                    this.VenuePhoneField = value;
                    this.RaisePropertyChanged("VenuePhone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfEventServiceReference.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/Create", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/CreateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebUI.WcfEventServiceReference.InvalidEventException), Action="http://tempuri.org/IServiceOf_EventDTO/CreateInvalidEventExceptionFault", Name="InvalidEventException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
        void Create(WebUI.WcfEventServiceReference.EventDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/Create", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(WebUI.WcfEventServiceReference.EventDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/Delete", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebUI.WcfEventServiceReference.CanNotCreateEventSeatException), Action="http://tempuri.org/IServiceOf_EventDTO/DeleteCanNotCreateEventSeatExceptionFault", Name="CanNotCreateEventSeatException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebUI.WcfEventServiceReference.CanNotDeleteEventException), Action="http://tempuri.org/IServiceOf_EventDTO/DeleteCanNotDeleteEventExceptionFault", Name="CanNotDeleteEventException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/Delete", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/Update", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebUI.WcfEventServiceReference.InvalidEventException), Action="http://tempuri.org/IServiceOf_EventDTO/UpdateInvalidEventExceptionFault", Name="InvalidEventException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
        void Update(WebUI.WcfEventServiceReference.EventDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/Update", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(WebUI.WcfEventServiceReference.EventDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/GetById", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/GetByIdResponse")]
        WebUI.WcfEventServiceReference.EventDTO GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/GetById", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/GetByIdResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventDTO> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/GetAll", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/GetAllResponse")]
        WebUI.WcfEventServiceReference.EventDTO[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceOf_EventDTO/GetAll", ReplyAction="http://tempuri.org/IServiceOf_EventDTO/GetAllResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventDTO[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/CreateEventSeats", ReplyAction="http://tempuri.org/IEventService/CreateEventSeatsResponse")]
        void CreateEventSeats(WebUI.WcfEventServiceReference.EventSeatDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/CreateEventSeats", ReplyAction="http://tempuri.org/IEventService/CreateEventSeatsResponse")]
        System.Threading.Tasks.Task CreateEventSeatsAsync(WebUI.WcfEventServiceReference.EventSeatDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventAreas", ReplyAction="http://tempuri.org/IEventService/UpdateEventAreasResponse")]
        void UpdateEventAreas(WebUI.WcfEventServiceReference.EventAreaDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventAreas", ReplyAction="http://tempuri.org/IEventService/UpdateEventAreasResponse")]
        System.Threading.Tasks.Task UpdateEventAreasAsync(WebUI.WcfEventServiceReference.EventAreaDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventSeat", ReplyAction="http://tempuri.org/IEventService/UpdateEventSeatResponse")]
        void UpdateEventSeat(WebUI.WcfEventServiceReference.EventSeatDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEventSeat", ReplyAction="http://tempuri.org/IEventService/UpdateEventSeatResponse")]
        System.Threading.Tasks.Task UpdateEventSeatAsync(WebUI.WcfEventServiceReference.EventSeatDTO obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventSeatDTOById", ReplyAction="http://tempuri.org/IEventService/GetEventSeatDTOByIdResponse")]
        WebUI.WcfEventServiceReference.EventSeatDTO GetEventSeatDTOById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventSeatDTOById", ReplyAction="http://tempuri.org/IEventService/GetEventSeatDTOByIdResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventSeatDTO> GetEventSeatDTOByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventSeat", ReplyAction="http://tempuri.org/IEventService/DeleteEventSeatResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebUI.WcfEventServiceReference.CanNotDeleteEventSeatException), Action="http://tempuri.org/IEventService/DeleteEventSeatCanNotDeleteEventSeatExceptionFau" +
            "lt", Name="CanNotDeleteEventSeatException", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary.CustomExceptions")]
        void DeleteEventSeat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEventSeat", ReplyAction="http://tempuri.org/IEventService/DeleteEventSeatResponse")]
        System.Threading.Tasks.Task DeleteEventSeatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventInfo", ReplyAction="http://tempuri.org/IEventService/GetEventInfoResponse")]
        WebUI.WcfEventServiceReference.EventInfoDTO GetEventInfo(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventInfo", ReplyAction="http://tempuri.org/IEventService/GetEventInfoResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventInfoDTO> GetEventInfoAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEventAreasDTOByEventId", ReplyAction="http://tempuri.org/IEventService/GetAllEventAreasDTOByEventIdResponse")]
        WebUI.WcfEventServiceReference.EventAreaDTO[] GetAllEventAreasDTOByEventId(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEventAreasDTOByEventId", ReplyAction="http://tempuri.org/IEventService/GetAllEventAreasDTOByEventIdResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventAreaDTO[]> GetAllEventAreasDTOByEventIdAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventAreaDTOById", ReplyAction="http://tempuri.org/IEventService/GetEventAreaDTOByIdResponse")]
        WebUI.WcfEventServiceReference.EventAreaDTO GetEventAreaDTOById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventAreaDTOById", ReplyAction="http://tempuri.org/IEventService/GetEventAreaDTOByIdResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventAreaDTO> GetEventAreaDTOByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEventSeatsDTOByEventAreaId", ReplyAction="http://tempuri.org/IEventService/GetAllEventSeatsDTOByEventAreaIdResponse")]
        WebUI.WcfEventServiceReference.EventSeatDTO[] GetAllEventSeatsDTOByEventAreaId(int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEventSeatsDTOByEventAreaId", ReplyAction="http://tempuri.org/IEventService/GetAllEventSeatsDTOByEventAreaIdResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventSeatDTO[]> GetAllEventSeatsDTOByEventAreaIdAsync(int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEventSeatDTOByEventId", ReplyAction="http://tempuri.org/IEventService/GetAllEventSeatDTOByEventIdResponse")]
        WebUI.WcfEventServiceReference.EventSeatDTO[] GetAllEventSeatDTOByEventId(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetAllEventSeatDTOByEventId", ReplyAction="http://tempuri.org/IEventService/GetAllEventSeatDTOByEventIdResponse")]
        System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventSeatDTO[]> GetAllEventSeatDTOByEventIdAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/IsEventValid", ReplyAction="http://tempuri.org/IEventService/IsEventValidResponse")]
        bool IsEventValid(int eventDTOId, System.DateTime dateTimeStart, System.DateTime dateTimeFinish, int layoutId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/IsEventValid", ReplyAction="http://tempuri.org/IEventService/IsEventValidResponse")]
        System.Threading.Tasks.Task<bool> IsEventValidAsync(int eventDTOId, System.DateTime dateTimeStart, System.DateTime dateTimeFinish, int layoutId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : WebUI.WcfEventServiceReference.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<WebUI.WcfEventServiceReference.IEventService>, WebUI.WcfEventServiceReference.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(WebUI.WcfEventServiceReference.EventDTO obj) {
            base.Channel.Create(obj);
        }
        
        public System.Threading.Tasks.Task CreateAsync(WebUI.WcfEventServiceReference.EventDTO obj) {
            return base.Channel.CreateAsync(obj);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void Update(WebUI.WcfEventServiceReference.EventDTO obj) {
            base.Channel.Update(obj);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(WebUI.WcfEventServiceReference.EventDTO obj) {
            return base.Channel.UpdateAsync(obj);
        }
        
        public WebUI.WcfEventServiceReference.EventDTO GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventDTO> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public WebUI.WcfEventServiceReference.EventDTO[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventDTO[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void CreateEventSeats(WebUI.WcfEventServiceReference.EventSeatDTO obj) {
            base.Channel.CreateEventSeats(obj);
        }
        
        public System.Threading.Tasks.Task CreateEventSeatsAsync(WebUI.WcfEventServiceReference.EventSeatDTO obj) {
            return base.Channel.CreateEventSeatsAsync(obj);
        }
        
        public void UpdateEventAreas(WebUI.WcfEventServiceReference.EventAreaDTO obj) {
            base.Channel.UpdateEventAreas(obj);
        }
        
        public System.Threading.Tasks.Task UpdateEventAreasAsync(WebUI.WcfEventServiceReference.EventAreaDTO obj) {
            return base.Channel.UpdateEventAreasAsync(obj);
        }
        
        public void UpdateEventSeat(WebUI.WcfEventServiceReference.EventSeatDTO obj) {
            base.Channel.UpdateEventSeat(obj);
        }
        
        public System.Threading.Tasks.Task UpdateEventSeatAsync(WebUI.WcfEventServiceReference.EventSeatDTO obj) {
            return base.Channel.UpdateEventSeatAsync(obj);
        }
        
        public WebUI.WcfEventServiceReference.EventSeatDTO GetEventSeatDTOById(int id) {
            return base.Channel.GetEventSeatDTOById(id);
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventSeatDTO> GetEventSeatDTOByIdAsync(int id) {
            return base.Channel.GetEventSeatDTOByIdAsync(id);
        }
        
        public void DeleteEventSeat(int id) {
            base.Channel.DeleteEventSeat(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventSeatAsync(int id) {
            return base.Channel.DeleteEventSeatAsync(id);
        }
        
        public WebUI.WcfEventServiceReference.EventInfoDTO GetEventInfo(int eventId) {
            return base.Channel.GetEventInfo(eventId);
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventInfoDTO> GetEventInfoAsync(int eventId) {
            return base.Channel.GetEventInfoAsync(eventId);
        }
        
        public WebUI.WcfEventServiceReference.EventAreaDTO[] GetAllEventAreasDTOByEventId(int eventId) {
            return base.Channel.GetAllEventAreasDTOByEventId(eventId);
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventAreaDTO[]> GetAllEventAreasDTOByEventIdAsync(int eventId) {
            return base.Channel.GetAllEventAreasDTOByEventIdAsync(eventId);
        }
        
        public WebUI.WcfEventServiceReference.EventAreaDTO GetEventAreaDTOById(int id) {
            return base.Channel.GetEventAreaDTOById(id);
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventAreaDTO> GetEventAreaDTOByIdAsync(int id) {
            return base.Channel.GetEventAreaDTOByIdAsync(id);
        }
        
        public WebUI.WcfEventServiceReference.EventSeatDTO[] GetAllEventSeatsDTOByEventAreaId(int areaId) {
            return base.Channel.GetAllEventSeatsDTOByEventAreaId(areaId);
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventSeatDTO[]> GetAllEventSeatsDTOByEventAreaIdAsync(int areaId) {
            return base.Channel.GetAllEventSeatsDTOByEventAreaIdAsync(areaId);
        }
        
        public WebUI.WcfEventServiceReference.EventSeatDTO[] GetAllEventSeatDTOByEventId(int eventId) {
            return base.Channel.GetAllEventSeatDTOByEventId(eventId);
        }
        
        public System.Threading.Tasks.Task<WebUI.WcfEventServiceReference.EventSeatDTO[]> GetAllEventSeatDTOByEventIdAsync(int eventId) {
            return base.Channel.GetAllEventSeatDTOByEventIdAsync(eventId);
        }
        
        public bool IsEventValid(int eventDTOId, System.DateTime dateTimeStart, System.DateTime dateTimeFinish, int layoutId) {
            return base.Channel.IsEventValid(eventDTOId, dateTimeStart, dateTimeFinish, layoutId);
        }
        
        public System.Threading.Tasks.Task<bool> IsEventValidAsync(int eventDTOId, System.DateTime dateTimeStart, System.DateTime dateTimeFinish, int layoutId) {
            return base.Channel.IsEventValidAsync(eventDTOId, dateTimeStart, dateTimeFinish, layoutId);
        }
    }
}
